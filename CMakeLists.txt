SET(PROJECT_NAME git-chat)
PROJECT(${PROJECT_NAME} C)

CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
SET(CMAKE_C_STANDARD 11)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
	SET(CMAKE_INSTALL_PREFIX $ENV{HOME}/ CACHE PATH "Install prefix default" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

IF(CMAKE_COMPILER_IS_GNUCC)
	ADD_DEFINITIONS(-Wall -Werror -pedantic -std=c11)
ENDIF(CMAKE_COMPILER_IS_GNUCC)

#
# Configure Project
#
SET(GIT_CHAT_MAJOR_VERSION 0)
SET(GIT_CHAT_MINOR_VERSION 1)

IF(NOT CMAKE_BUILD_TYPE MATCHES RELEASE)
	EXECUTE_PROCESS(
			COMMAND git rev-parse --short HEAD
			WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
			OUTPUT_VARIABLE GIT_COMMIT_SHORT_HASH
			OUTPUT_STRIP_TRAILING_WHITESPACE
	)

	SET(CMAKE_PROJECT_VERSION_MAJOR ${GIT_CHAT_MAJOR_VERSION})
	SET(CMAKE_PROJECT_VERSION_MINOR "${GIT_CHAT_MINOR_VERSION}.git-${GIT_COMMIT_SHORT_HASH}")
ELSE()
	SET(CMAKE_PROJECT_VERSION_MAJOR ${GIT_CHAT_MAJOR_VERSION})
	SET(CMAKE_PROJECT_VERSION_MINOR ${GIT_CHAT_MINOR_VERSION})
ENDIF(NOT CMAKE_BUILD_TYPE MATCHES RELEASE)

CONFIGURE_FILE(
	"${PROJECT_SOURCE_DIR}/templates/version.h.in"
	"${PROJECT_BINARY_DIR}/include/version.h"
)

FILE(GLOB_RECURSE SRC_LIST FOLLOW_SYMLINKS ${PROJECT_SOURCE_DIR}/src/*.c)
FILE(GLOB_RECURSE HEAD_FILES FOLLOW_SYMLINKS ${PROJECT_SOURCE_DIR}/include/*.h ${PROJECT_BINARY_DIR}/include/*.h)
FILE(GLOB_RECURSE SHARE_LIST FOLLOW_SYMLINKS ${PROJECT_SOURCE_DIR}/share/*)

#
# Configure git-chat Executable and Installation
#
FIND_PACKAGE(GPGME REQUIRED)
IF(NOT GPGME_VANILLA_FOUND)
	MESSAGE(FATAL_ERROR "Failed to locate GPGME dependency (GPGME_VANILLA)")
ENDIF()

#
# Set Include Directories
#
INCLUDE_DIRECTORIES(
		"${PROJECT_SOURCE_DIR}/include/"
		"${PROJECT_BINARY_DIR}/include/"
		"${GPGME_INCLUDES}"
)

ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_SOURCE_DIR}/src/git-chat.c ${SRC_LIST})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GPGME_VANILLA_LIBRARIES})

INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)
INSTALL(DIRECTORY ${PROJECT_SOURCE_DIR}/share/ DESTINATION share/${PROJECT_NAME})
CONFIGURE_FILE(
		"${PROJECT_SOURCE_DIR}/ci/run-build.sh"
		"${PROJECT_BINARY_DIR}/run-build.sh"
		COPYONLY
)

IF(NOT TARGET uninstall)
	CONFIGURE_FILE(
			"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake"
			"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
			IMMEDIATE @ONLY)

	ADD_CUSTOM_TARGET(uninstall
			COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
ENDIF()


#
# Configure Man Page Installation
#
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/docs)

#
# Configure Unit and Integration Tests
#
ENABLE_TESTING()
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/test)