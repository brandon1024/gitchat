SET(PROJECT_NAME git-chat)
CMAKE_POLICY(SET CMP0048 NEW)
PROJECT(${PROJECT_NAME} VERSION 0.0.1 DESCRIPTION "A Git-Based Command-Line Messaging Application" LANGUAGES C)

CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
SET(CMAKE_C_STANDARD 11)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
	SET(CMAKE_INSTALL_PREFIX $ENV{HOME}/ CACHE PATH "Install prefix default" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
	ADD_DEFINITIONS(-Wall -Werror -pedantic)
ELSEIF(CMAKE_C_COMPILER_ID STREQUAL "Clang")
	ADD_DEFINITIONS(-Wall -Wextra -pedantic)
ENDIF()


#
# Configure Project
#
SET(GIT_CHAT_MAJOR_VERSION ${CMAKE_PROJECT_VERSION_MAJOR})
SET(GIT_CHAT_MINOR_VERSION ${CMAKE_PROJECT_VERSION_MINOR})
SET(GIT_CHAT_PATCH_VERSION ${CMAKE_PROJECT_VERSION_PATCH})

EXECUTE_PROCESS(
		COMMAND git rev-parse --short HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_CHAT_GIT_REV
		OUTPUT_STRIP_TRAILING_WHITESPACE
		RESULT_VARIABLE git_rev_parse_ret
)

IF (NOT git_rev_parse_ret EQUAL "0")
	SET(GIT_CHAT_GIT_REV "unknown-rev")
ENDIF()

IF(NOT CMAKE_BUILD_TYPE MATCHES RELEASE)
	SET(GIT_CHAT_VERSION "${CMAKE_PROJECT_VERSION}.git-${GIT_CHAT_GIT_REV}")
ELSE()
	SET(GIT_CHAT_VERSION ${CMAKE_PROJECT_VERSION})
ENDIF(NOT CMAKE_BUILD_TYPE MATCHES RELEASE)

OPTION(RUNTIME_LOGGING "Compile with logging enabled" ON)
IF(RUNTIME_LOGGING)
	ADD_DEFINITIONS(-DRUNTIME_LOGGING)
ENDIF(RUNTIME_LOGGING)

CONFIGURE_FILE(
	"${PROJECT_SOURCE_DIR}/templates/version.h.in"
	"${PROJECT_BINARY_DIR}/include/version.h"
)


#
# Configure git-chat Executable and Installation
#
FIND_PACKAGE(GPGME REQUIRED)
IF(NOT GPGME_VANILLA_FOUND)
	MESSAGE(FATAL_ERROR "Failed to locate GPGME dependency (GPGME_VANILLA)")
ENDIF()

INCLUDE_DIRECTORIES(
		"${CMAKE_CURRENT_SOURCE_DIR}/include/"
		"${CMAKE_CURRENT_BINARY_DIR}/include/"
		"${GPGME_INCLUDES}"
)

FILE(GLOB_RECURSE SRC_LIST FOLLOW_SYMLINKS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.c)
ADD_EXECUTABLE(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/src/git-chat.c ${SRC_LIST})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} m ${GPGME_VANILLA_LIBRARIES})

INSTALL(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)
INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/share/ DESTINATION share/${PROJECT_NAME})
CONFIGURE_FILE(
		"${CMAKE_CURRENT_SOURCE_DIR}/ci/run-build.sh"
		"${CMAKE_CURRENT_BINARY_DIR}/run-build.sh"
		COPYONLY
)

IF(NOT TARGET uninstall)
	CONFIGURE_FILE(
			"${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake"
			"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
			IMMEDIATE @ONLY)

	ADD_CUSTOM_TARGET(uninstall
			COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
ENDIF()


#
# Configure Man Page Installation
#
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/docs)


#
# Configure Unit and Integration Tests
#
ENABLE_TESTING()
ADD_SUBDIRECTORY(${CMAKE_CURRENT_SOURCE_DIR}/test)
