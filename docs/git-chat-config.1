.TH git-chat-config 1 "@CMAKE_COMPILATION_DATE@" "git-chat @CMAKE_PROJECT_VERSION_MAJOR@.@CMAKE_PROJECT_VERSION_MINOR@.@CMAKE_PROJECT_VERSION_PATCH@" "git-chat manual"

.SH NAME
git-chat-config \- configure the current channel


.SH SYNOPSIS
.sp
.nf
\fIgit chat config\fR [\-\-get] <key>
\fIgit chat config\fR \-\-get\-or\-default <key>
\fIgit chat config\fR \-\-set <key> <value>
\fIgit chat config\fR \-\-unset <key>
\fIgit chat config\fR (\-\-is\-valid\-key <key>) | \-\-is\-valid\-config
\fIgit chat config\fR (\-e | \-\-edit)
\fIgit chat config\fR (\-h | \-\-help)


.SH DESCRIPTION
Configure the properties of a git-chat channel by manipulating its \fI/git-chat/config\fR.

This command can be used to query, add, replace and remove configuration keys from the channel config file. This command can also be used for validating the syntax of the config file, and to verify that all config keys are recognized by git-chat.


.SH OPTIONS
.TP
\-\-get <key>
Get the value for a given config key in the git-chat config file. If no config exists with the given key, the terminates with an exit status of 1.

.TP
\-\-get\-or\-default <key>
Get the value for a given config key in the git-chat config file, or a default value if the key is recognized by git-chat. Terminates with a non-zero status if the key does not exist and the provided key is not recognized by git-chat.

.TP
\-\-set <key> <value>
Create, or update, a config key in the git-chat config file, and assign it the given value. Exits with a non-zero status if the key could not be set for any reason.

.TP
\-\-unset <key>
Remove a key from the git-chat config file. Exits with a zero status if the key was successfully removed, and non-zero if the key does not exist or could not be removed.

.TP
\-\-is\-valid\-key <key>
Exit with a zero status if the given key is recognized by git-chat, and non-zero otherwise.

.TP
\-\-is\-valid\-config
Validate the git-chat config file for the current channel for syntax errors. If invalid, exits with a non-zero status.

.TP
\-e, \-\-edit
Open the git-chat config file in Vim.

.TP
\-h, \-\-help
Print a simple synopsis and exit.


.SH CONFIG FILE FORMAT
The config file has a format similar to INI, TOML or Git's own config file format, albeit simplified. It consists of key-value pairs, organized in sections. For example:

.PP
.in +4n
.EX
[ section_a ]
    key_1 = value
    key_2 = valueb
[ section_b ]
    key_1 = 123
    key_a = 321
.EE
.in
.PP

.SP
.SS Whitespace Rules
.SP
Leading and trailing whitespace is generally ignored, unless escaped. Whitespace surrounding section names, property names and property values are removed, so

.PP
.in +4n
.EX
[ section_a ]
    key_1 = value
    key_2 = valueb
.EE
.in
.PP

is equivalent to

.PP
.in +4n
.EX
[section_b]
key_1 = 123
key_a = 321
.EE
.in
.PP

Section names, property names and property values cannot span multiple lines.

.SP
.SS Sections and Subsections
.SP
Key-value pairs can be defined outside of a section, but must appear before any section declaration, or after an empty section:

.PP
.in +4n
.EX
key_3 = valuec

[ section_a ]
    key_1 = value
    key_2 = valueb
[]
    key_4 = valued
.EE
.in
.PP

Sections cannot be nested, but section names can can be period-delimited, which can be used to help indicate that the section is be represented as a subsection:

.PP
.in +4n
.EX
[ section ]
    key_1 = value
[ section.subsection ]
    key_2 = value
.EE
.in
.PP

Duplicate section names and properties are allowed. Duplicate properties will simply override earlier declarations.

.PP
.in +4n
.EX
[ section_a ]
    key_1 = value
    key_2 = valueb
[ section_a ]
    key_1 = 123
    key_a = 321
.EE
.in
.PP

In the example above, the following effective properties are defined:

.PP
.in +4n
.EX
section_a.key_1 = 123
section_a.key_2 = valueb
section_a.key_a = 321
.EE
.in
.PP

Section names are case sensitive.

.SP
.SS Key-Value Pairs
.SP
Key-value pairs take the form `<key> = <value>`. Any characters between the first `=` and end of line are parsed as the value, with the exception that leading and trailing whitespace is trimmed. Values may not spread over multiple lines.

Property names are case sensitive.

Property names may contain period-delimited components. For example, the following config file is valid:

.PP
.in +4n
.EX
section.subsection.property1 = value1
section.subsection.property2 = value2
.EE
.in
.PP

Property names and values may be surrounded in single or double quotes
(see further).

.SP
.SS Addressing Key-Value Pairs
.SP
Values in a config file are addressed by the section they belong to, and the property name. Section names and properties are delimited by a period `.`:

.PP
.in +4n
.EX
config:
[ section_a ]
    key_1 = value
    key_2 = valueb
[ section_b ]
    key_a = 123
    key_b = 321

keys:
section_a.key_1
section_b.key_a
.EE
.in
.PP

.SP
.SS Characters, Quotes and Escaping
.SP
Unquoted, section names and property names can only contain alphanumeric characters and underscores (`_`).

When a section name or property name must contain symbols, the section name or property name may be surrounded in double quotes. For example:

.PP
.in +4n
.EX
[section.with."$ymbols"]
    "pr()perty" = value
.EE
.in
.PP

Double quotes (`"`) and backslashes (`\\`) can be escaped as `\\"` and `\\\\`, respectively. Backslashes preceding other characters are simply removed, so `\\n` becomes `n`.


.SH SEE ALSO
\fBgit-chat-init\fR(1)


.SH REPORTING BUGS
@DOCS_REPORTING_BUGS_SECTION@


.SH AUTHOR
@DOCS_AUTHORS_SECTION@
